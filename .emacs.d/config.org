* Configuration
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Functions
** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
* General
** aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** backups
#+BEGIN_SRC emacs-lisp 
  (setq make-backup-file nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)

  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)

  (defun kill-all-buffers ()
    (interactive)
    (when (y-or-n-p "Do you really want to delete all buffers?")
      (mapc 'kill-buffer (buffer-list))))
  (global-set-key (kbd "C-M-k") 'kill-all-buffers)
#+END_SRC
** clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
** electric pairs
#+BEGIN_SRC emacs-lisp
    (setq electric-pair-pairs '(
                                (?\( . ?\))
                                (?\[ . ?\))
                                ))
    (electric-pair-mode t)
#+END_SRC
** encoding/language
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
** menu
#+BEGIN_SRC emacs-lisp 
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
** messages
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
  (setq initial-scratch-message ";; Scratch")
#+END_SRC
** pasting
#+BEGIN_SRC emacs-lisp
  (setq select-enable-clipboard t)
#+END_SRC
** scrolling
#+BEGIN_SRC emacs-lisp 
  (setq scroll-conservatively 100)
#+END_SRC
** show lines and columns modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** subword camelcase
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** window splitting
#+BEGIN_SRC emacs-lisp
  (defun split-follow-below ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-follow-right ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'split-follow-below)
  (global-set-key (kbd "C-x 3") 'split-follow-right)
#+END_SRC
* IDO Mode
** enable
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Org mode
** agenda
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-agenda-files (list "~/Documents/journals/agenda.org"))
#+END_SRC
** basic config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** common settings
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
#+END_SRC
** keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC
** htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC
** line wrap
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
  (setq org-bullets-bullet-list '("Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ" "Ⅷ" "Ⅸ" "Ⅹ" "Ⅺ" "Ⅻ"))
#+END_SRC
* Packages
** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :init)
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((agenda . 10)
                            (recents . 5)))
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-banner-logo-title "aka's GNU Emacs"))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'hungry-delete-mode)
    (diminish 'company-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode))
#+END_SRC
** djvu
#+BEGIN_SRC emacs-lisp
  (use-package djvu
    :ensure t
    :init)
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
;;  (use-package evil
;;   :ensure t
;;    :init)
;;  (evil-mode 1)
#+END_SRC
** hungry-delete
#+BEGIN_SRC emacs-lisp
  ;;(use-package hungry-delete
  ;;  :ensure t
  ;;  :config (global-hungry-delete-mode))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC
** pdfview
#+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :ensure t
      :init
      (pdf-tools-install))
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC
** rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
    ;;(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-M-e" . sudo-edit))
#+END_SRC
** switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l" ";"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp 
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* Terminal
** keybinding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
** shell
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
* Window System
** eye candy
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC
* Programming Only
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
* Language Specific
** C
#+BEGIN_SRC emacs-lisp
  (require 'cc-mode)
  (setq-default c-basic-offset 4
                tab-width 4
                indent-tabs-mode t)

  (setq c-default-style "k&r")

  ;;(define-key c-mode-base-map (kbd "RET") 'newline-and-indent)
#+END_SRC
** Emacs-lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
    (slime-setup '(slime-fancy slime-company)))
#+END_SRC
** HTML
#+BEGIN_SRC emacs-lisp
  (add-hook 'html-mode-hook
            (lambda()
              (setq sgml-basic-offset 4)
              (setq indent-tabs-mode t)))
#+END_SRC
** OCaml
#+BEGIN_SRC emacs-lisp
  (setq opam-share (substring (shell-command-to-string "opam config var share 2> /dev/null") 0 -1))
  (add-to-list 'load-path (concat opam-share "/emacs/site-lisp"))

  (require 'ocp-indent)
  (require 'merlin)

  (setq ocp-indent-path "/home/aka/.opam/system/bin/ocp-indent")

  (load "/home/aka/.opam/system/share/emacs/site-lisp/tuareg-site-file")
  (add-hook 'tuareg-mode-hook 'merlin-mode t)
   
    ;; Make company aware of merlin and hook it into merlin
    (with-eval-after-load 'company
      (add-to-list 'company-backends 'merlin-company-backend))
    (add-hook 'merlin-mode-hook 'company-mode)
    ;; Disable evil electric indentation
    (add-hook 'tuareg-mode
              (lambda()
              (electric-indent-mode -1)))
    ;; utop
    ;; Add the opam lisp dir to the emacs load path
    (add-to-list
     'load-path
     (replace-regexp-in-string
      "\n" "/share/emacs/site-lisp"
      (shell-command-to-string "opam config var prefix")))

    ;; Automatically load utop.el
    (autoload 'utop "utop" "Toplevel for OCaml" t)
    ;; Use the opam installed utop
    (setq utop-command "opam config exec -- utop -emacs")
    ;; Minor mode
    (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
    (add-hook 'tuareg-mode-hook 'utop-minor-mode)
#+END_SRC
** Racket
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :ensure t
    :init)

  (add-hook 'racket-mode-hook
            (lambda ()
              (define-key racket-mode-map (kbd "C-c r") 'racket-run)))

  ;; Scribble mode
  (use-package scribble-mode
    :ensure t
    :init)
#+END_SRC
* Byte compilation
- Note that using a daemon/client setup is still much faster!
** Function to byte compile config
#+BEGIN_SRC emacs-lisp
  (defun byte-compile-emacs-config-dir ()
    "Byte-compile all of the emacs config directory"
    (interactive)
    (byte-recompile-directory user-emacs-directory 0))
#+END_SRC
** Avoid stale .elc files
#+BEGIN_SRC emacs-lisp
  (defun remove-elc-on-save ()
    "If saving an elisp file, the invalid .elc will be removed"
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))
              nil
              t))

  (add-hook 'emacs-lisp-mode-hook 'remove-elc-on-save)
#+END_SRC
* Emacs Client
** Fix dashboard plugin
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
** Fix spacemacs-dark theme
#+BEGIN_SRC emacs-lisp
  (defun my/load-theme (frame)
    (select-frame frame)
    (load-theme 'spacemacs-dark t))
  (if (daemonp)
      (add-hook 'after-make-frame-functions #'my/load-theme)
    (load-theme 'spacemacs-dark t))
#+END_SRC
** Fix default directory
#+BEGIN_SRC emacs-lisp
  (setq default-directory (concat (getenv "HOME") "/"))
#+END_SRC
